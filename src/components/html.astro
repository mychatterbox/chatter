---
import ColorScheme from "components/colorscheme/head.astro";
import at_icon from "images/apple-touch-icon.png";
import icon from "images/icon.svg";
import "styles/global.css";
import { ClientRouter } from 'astro:transitions';
import { themeColors } from "components/colorscheme/theme.ts";
import { getImage } from 'astro:assets';

export interface Props {
  title: string;
  description: string;
  searchTitle?: string;
  robots?: "noindex";
  ogType?: "website" | "article";
  ogTitle?: string;
  ogDescription?: string;
  ogImage?: string;
  themeColor?: string;
  pubDate?: Date;
}

const {
  title,
  searchTitle,
  description,
  robots,
  ogType = "website",
  ogTitle = title,
  ogDescription = description,
  ogImage,
  themeColor = themeColors.dark.meta,
  pubDate,
} = Astro.props;


const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const defaultOgImage = "https://chatter.kr/images/no_ogimage.png";

async function resolveImagePath(rawPath: string) {
  // 1. 빈 문자열 처리
  if (!rawPath.trim()) return null;

  // 2. 상대 경로 → 절대 경로 변환
  const normalizedPath = rawPath.startsWith("/") 
    ? rawPath 
    : `/${rawPath}`;

  // 3. 구형 경로(/blog-images/) → 새 경로(/assets/) 매핑
  const assetPath = normalizedPath.replace(
    /^\/blog-images\//, 
    "/assets/blog-images/"
  );

  return assetPath;
}

async function getOptimizedImageUrl(rawPath: string) {
  try {
    const imagePath = await resolveImagePath(rawPath);
    if (!imagePath) return defaultOgImage;

    // Vite 호환 경로로 변환
    const vitePath = imagePath.replace(/^\/assets\//, "/src/assets/");
    const imageModule = await import(/* @vite-ignore */ vitePath);
    
    const optimized = await getImage({
      src: imageModule.default,
      format: "webp"
    });
    return new URL(optimized.src, Astro.site).toString();
  } catch (error) {
    console.error(`이미지 처리 실패 (${rawPath}):`, error);
    return defaultOgImage;
  }
}

const finalOgImage = await getOptimizedImageUrl(ogImage || "");
---

<!doctype html>
<html class="h-full antialiased" lang="ko" >
  <head>
    <meta charset="utf-8" />
    <meta name="theme-color" content={themeColor} />
    <meta name="color-scheme" content="light dark" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{title}</title>
    {searchTitle && <meta name="title" content={searchTitle} />}
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    {robots && <meta name="robots" content={robots} />}
    <slot name="og">
      <meta property="og:type" content={ogType} />
      <meta property="og:site_name" content="chatter.kr" />
      <meta property="og:title" content={ogTitle} />
      <meta property="og:description" content={ogDescription} />
      <meta property="og:url" content={canonicalURL} />
      {finalOgImage && <meta property="og:image" content={finalOgImage} />}
      <meta property="twitter:card" content="summary_large_image" />
    </slot>
    <link rel="icon" href={icon.src} />
    <link rel="apple-touch-icon" href={at_icon.src} />
    <link rel="manifest" href="/site.webmanifest" crossorigin="use-credentials" />
    <ColorScheme />
    <!-- <link rel="preload" href={font} as="font" type="font/woff2" crossorigin /> -->
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="alternate" type="application/rss+xml" href="/rss.xml" title="rss" />
    <slot name="head" />
    <ClientRouter />
    <meta name="naver-site-verification" content="e782519ae8e3850a5acf6d2089279ece14da7dac" />
  </head>
  <body class="flex h-full flex-col bg-custom-bg-light dark:bg-custom-bg-dark">
    <slot />
  </body>
</html>