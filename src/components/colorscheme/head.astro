<script is:inline>
  // 단일 실행 보장
  if (!window.__themeInitialized) {
    window.__themeInitialized = true;
    
    // 테마 적용 함수 - 모든 테마 변경 작업을 한 곳에서 처리
    const applyTheme = (isDark) => {
      // 클래스 적용
      document.documentElement.classList.toggle('dark', isDark);
      // 로컬 스토리지 저장
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      // 메타 태그 업데이트
      document.querySelector('meta[name="theme-color"]').content = isDark ? '#121212' : '#ffffff';
    };
  
    // 초기 테마 판단 함수
    const initTheme = () => {
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      return savedTheme ? savedTheme === 'dark' : prefersDark;
    };
    
    // 초기 테마 적용 (최우선 실행)
    applyTheme(initTheme());
  
    // 전역 함수 등록 - 다른 컴포넌트에서 사용할 단일 진입점
    window.toggleTheme = () => {
      const isDark = !document.documentElement.classList.contains('dark');
      applyTheme(isDark);
      return isDark ? 'dark' : 'light';
    };
  
    // 시스템 설정 변경 감지
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        applyTheme(e.matches);
      }
    });
  
    // Astro 페이지 전환 시 테마 유지 - 간소화된 로직
    document.addEventListener('astro:after-swap', () => {
      // initTheme 함수 재사용하여 코드 중복 방지
      applyTheme(initTheme());
    });
  }
</script>